// FILE:  main.cpp// NAME:  Mark Sattolo#include <cstdlib>#include <iostream>#include "test.hpp"#include "heap.hpp"#include "aheap.hpp"const int SEED = 17 ;// implement a compare_fxn for 'less than' (from the FORTRAN .lt. -> less than)// *** MUST BE STRICTLY LESS - NOT LESS OR EQUAL !!! ***bool lt( const test_class& c1, const test_class& c2 ){  return( *const_cast<test_class&>(c1) < *const_cast<test_class&>(c2) );}// get a random numberint rrr( int n ){#ifdef __GNUG__  cout << "__GNUG__ defined -- using random() % n" << endl;  return random() % n ;#else  cout << "__GNUG__ NOT defined -- using random(n)" << endl;  return random( n );#endif}int main( int argc, char* argv[] ){  // check that there are values for nodes on the command line  if( argc < 2 )  {	 cout << "Usage: 'heap int1 int2 int...' " << endl ;	 exit( 1 ) ;  }  /* create an array heap, of template type 'test_class', called 'myHeap',	  with 'lt' as the compare_fxn and 'SMALLER_FIRST' as the ordering		*/  array_heap<test_class> myHeap( lt, array_heap<test_class>::SMALLER_FIRST ) ;  // push the command line values onto the heap  for( int i=1; i < argc; ++i )  {	 heap<test_class>::handle& h1 = myHeap.push( test_class(atof(argv[i])) ) ;	 // randomly change some node values and see if the heap adjusts properly	 if( i % 2 == 0 )	 {		int k = rrr( SEED ) ;		/* use the overloaded * to get a reference to the element (test_class)			of h1 and remove the "const-ness" with a cast - then use an			overloaded * to get a reference to the actual integer value held			by the test_class and increment it by k */		*const_cast<test_class&>( *h1 ) += k ;		/* inform the heap that one of the nodes has changed and the heap			may need to adjust itself */		myHeap.priority_change( h1 ) ;	 }  }  cout << endl ;  // print out the heap's structure and references  myHeap.print( cout );  cout << "-------------" << endl ;  // print each node in the heap then destroy it and recover the memory  while( !myHeap.empty() )  {	 cout << myHeap.top() << ' ' ;	 myHeap.pop() ;  }  cout << endl ;  return 0 ;}//main()